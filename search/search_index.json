{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This work is made available under the terms of the Creative Commons attribution-NonCommercial ShareAlike 4.0 international license . GL4 - INSAT \u00b6 Course materials: https://liliasfaxi.wixsite.com/liliasfaxi/architecture-logicielle Github repository : https://github.com/INSATunisia Overview \u00b6 These labs provide hands-on scenarios to experiment with different software architectures. It covers the following topics: TP1 : The SOLID principles TP2 : MV* architectures","title":"Software Architecture Labs"},{"location":"#gl4-insat","text":"Course materials: https://liliasfaxi.wixsite.com/liliasfaxi/architecture-logicielle Github repository : https://github.com/INSATunisia","title":"GL4 - INSAT"},{"location":"#overview","text":"These labs provide hands-on scenarios to experiment with different software architectures. It covers the following topics: TP1 : The SOLID principles TP2 : MV* architectures","title":"Overview"},{"location":"tp1/","text":"Download PDF \u00b6 Introduction \u00b6 The SOLID principles are design principles that are used in Object-Oriented software development in order to encourage us to create more maintainable, understandable, and flexible applications. In this workshop, we will iterate through each principle where a given problem has already been addressed. We will analyze the existing solution, identify its shortcomings and then suggest a more SOLID design for it. Questions \u00b6 Clone this repository https://github.com/liliasfaxi/SOLID locally and go through the examples in the following order: SRP (Single Responsibility Principle) OCP (Open-Closed Principle) LSP (Liskov Substituion Principle) ISP (Interface Segregation Principle) DIP (Dependency Inversion Principle)","title":"Lab1 - The SOLID principles"},{"location":"tp1/#download-pdf","text":"","title":"Download PDF"},{"location":"tp1/#introduction","text":"The SOLID principles are design principles that are used in Object-Oriented software development in order to encourage us to create more maintainable, understandable, and flexible applications. In this workshop, we will iterate through each principle where a given problem has already been addressed. We will analyze the existing solution, identify its shortcomings and then suggest a more SOLID design for it.","title":"Introduction"},{"location":"tp1/#questions","text":"Clone this repository https://github.com/liliasfaxi/SOLID locally and go through the examples in the following order: SRP (Single Responsibility Principle) OCP (Open-Closed Principle) LSP (Liskov Substituion Principle) ISP (Interface Segregation Principle) DIP (Dependency Inversion Principle)","title":"Questions"},{"location":"tp2/","text":"Download PDF \u00b6 Introduction \u00b6 The MV* architecture is a common software architecture pattern that is motivated by the idea of having Separated Presentation which provides a clear division between domain objects that model our perception of the real world, and presentation objects that are the GUI elements we see on the screen. This reduces the coupling between components and allows each component to be independently developed, tested, modified, reused and scaled. Questions \u00b6 MV* is an umbrella term that encompasses variants of this architecture pattern, and they differ in terms of the type and level of coupling between the components. Identify the advantages, disadvantages and use cases of : MVC MVP MVVM The Tunisian ministry of health is organizing a software development hackathon in order to be able to recruit the best talent that can develop a mobile application for the EVAX platform. Motivated by the interesting work opportunity (and the even more interesting cash prize), everyone in the GL4 class has decided to participate. More than one architecture comes to mind. Keeping in mind that this is a 24 hour highly competitive hackathon where you need to be fast at developing this proof of concept, what architecture would you choose? Congratulations! Now that you have won the hackathon (and helped your savings ;) ), it is time to actually build the mobile application. It goes without saying that this application should be robust with minimal bugs, so that it can be safely deployed and adopted by the ministry. So, in order for you to be confident with your code, it is recommended to follow a TDD approach in order to catch bugs early on and make sure that you have a higher overall test coverage. One thing to keep in mind as well is that this application is not a basic CRUD one. It has multiple views with eventual complex operations (like sending vaccine SMS and their reminders, automatically rescheduling missed appointments, etc.). Having taken all of the above into consideration, what would be the architectural style that you would choose? What refactoring would you suggest for both the web and mobile applications ? What architectures would you then suggest?","title":"Lab2 - MV* Architectures"},{"location":"tp2/#download-pdf","text":"","title":"Download PDF"},{"location":"tp2/#introduction","text":"The MV* architecture is a common software architecture pattern that is motivated by the idea of having Separated Presentation which provides a clear division between domain objects that model our perception of the real world, and presentation objects that are the GUI elements we see on the screen. This reduces the coupling between components and allows each component to be independently developed, tested, modified, reused and scaled.","title":"Introduction"},{"location":"tp2/#questions","text":"MV* is an umbrella term that encompasses variants of this architecture pattern, and they differ in terms of the type and level of coupling between the components. Identify the advantages, disadvantages and use cases of : MVC MVP MVVM The Tunisian ministry of health is organizing a software development hackathon in order to be able to recruit the best talent that can develop a mobile application for the EVAX platform. Motivated by the interesting work opportunity (and the even more interesting cash prize), everyone in the GL4 class has decided to participate. More than one architecture comes to mind. Keeping in mind that this is a 24 hour highly competitive hackathon where you need to be fast at developing this proof of concept, what architecture would you choose? Congratulations! Now that you have won the hackathon (and helped your savings ;) ), it is time to actually build the mobile application. It goes without saying that this application should be robust with minimal bugs, so that it can be safely deployed and adopted by the ministry. So, in order for you to be confident with your code, it is recommended to follow a TDD approach in order to catch bugs early on and make sure that you have a higher overall test coverage. One thing to keep in mind as well is that this application is not a basic CRUD one. It has multiple views with eventual complex operations (like sending vaccine SMS and their reminders, automatically rescheduling missed appointments, etc.). Having taken all of the above into consideration, what would be the architectural style that you would choose? What refactoring would you suggest for both the web and mobile applications ? What architectures would you then suggest?","title":"Questions"}]}