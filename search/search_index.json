{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This work is made available under the terms of the Creative Commons attribution-NonCommercial ShareAlike 4.0 international license . GL4 - INSAT \u00b6 Course materials: https://liliasfaxi.wixsite.com/liliasfaxi/architecture-logicielle Github repository : https://github.com/INSATunisia Overview \u00b6 These labs provide hands-on scenarios to experiment with different software architectures. It covers the following topics: Lab1 : The SOLID principles Lab2 : MV* architectures Lab3 : Microservices architecture Lab4 : Towards more reactive microservices Lab5 : A hybrid software architecture","title":"Software Architecture Labs"},{"location":"#gl4-insat","text":"Course materials: https://liliasfaxi.wixsite.com/liliasfaxi/architecture-logicielle Github repository : https://github.com/INSATunisia","title":"GL4 - INSAT"},{"location":"#overview","text":"These labs provide hands-on scenarios to experiment with different software architectures. It covers the following topics: Lab1 : The SOLID principles Lab2 : MV* architectures Lab3 : Microservices architecture Lab4 : Towards more reactive microservices Lab5 : A hybrid software architecture","title":"Overview"},{"location":"tp1/","text":"Download PDF \u00b6 Introduction \u00b6 The SOLID principles are design principles that are used in Object-Oriented software development in order to encourage us to create more maintainable, understandable, and flexible applications. In this workshop, we will iterate through each principle where a given problem has already been addressed. We will analyze the existing solution, identify its shortcomings and then suggest a more SOLID design for it. Questions \u00b6 Clone this repository https://github.com/liliasfaxi/SOLID locally and go through the examples in the following order: SRP (Single Responsibility Principle) OCP (Open-Closed Principle) LSP (Liskov Substituion Principle) ISP (Interface Segregation Principle) DIP (Dependency Inversion Principle)","title":"Lab1 - The SOLID principles"},{"location":"tp1/#download-pdf","text":"","title":"Download PDF"},{"location":"tp1/#introduction","text":"The SOLID principles are design principles that are used in Object-Oriented software development in order to encourage us to create more maintainable, understandable, and flexible applications. In this workshop, we will iterate through each principle where a given problem has already been addressed. We will analyze the existing solution, identify its shortcomings and then suggest a more SOLID design for it.","title":"Introduction"},{"location":"tp1/#questions","text":"Clone this repository https://github.com/liliasfaxi/SOLID locally and go through the examples in the following order: SRP (Single Responsibility Principle) OCP (Open-Closed Principle) LSP (Liskov Substituion Principle) ISP (Interface Segregation Principle) DIP (Dependency Inversion Principle)","title":"Questions"},{"location":"tp2/","text":"Download PDF \u00b6 Introduction \u00b6 The MV* architecture is a common software architecture pattern that is motivated by the idea of having Separated Presentation which provides a clear division between domain objects that model our perception of the real world, and presentation objects that are the GUI elements we see on the screen. This reduces the coupling between components and allows each component to be independently developed, tested, modified, reused and scaled. Questions \u00b6 MV* is an umbrella term that encompasses variants of this architecture pattern, and they differ in terms of the type and level of coupling between the components. Identify the advantages, disadvantages and use cases of : MVC MVP MVVM The Tunisian ministry of health is organizing a software development hackathon in order to be able to recruit the best talent that can develop a mobile application for the EVAX platform. Motivated by the interesting work opportunity (and the even more interesting cash prize), everyone in the GL4 class has decided to participate. More than one architecture comes to mind. Keeping in mind that this is a 24 hour highly competitive hackathon where you need to be fast at developing this proof of concept, what architecture would you choose? Congratulations! Now that you have won the hackathon (and helped your savings ;) ), it is time to actually build the mobile application. It goes without saying that this application should be robust with minimal bugs, so that it can be safely deployed and adopted by the ministry. So, in order for you to be confident with your code, it is recommended to follow a TDD approach in order to catch bugs early on and make sure that you have a higher overall test coverage. One thing to keep in mind as well is that this application is not a basic CRUD one. It has multiple views with eventual complex operations (like sending vaccine SMS and their reminders, automatically rescheduling missed appointments, etc.). Having taken all of the above into consideration, what would be the architectural style that you would choose? What refactoring would you suggest for both the web and mobile applications ? What architectures would you then suggest?","title":"Lab2 - MV* Architectures"},{"location":"tp2/#download-pdf","text":"","title":"Download PDF"},{"location":"tp2/#introduction","text":"The MV* architecture is a common software architecture pattern that is motivated by the idea of having Separated Presentation which provides a clear division between domain objects that model our perception of the real world, and presentation objects that are the GUI elements we see on the screen. This reduces the coupling between components and allows each component to be independently developed, tested, modified, reused and scaled.","title":"Introduction"},{"location":"tp2/#questions","text":"MV* is an umbrella term that encompasses variants of this architecture pattern, and they differ in terms of the type and level of coupling between the components. Identify the advantages, disadvantages and use cases of : MVC MVP MVVM The Tunisian ministry of health is organizing a software development hackathon in order to be able to recruit the best talent that can develop a mobile application for the EVAX platform. Motivated by the interesting work opportunity (and the even more interesting cash prize), everyone in the GL4 class has decided to participate. More than one architecture comes to mind. Keeping in mind that this is a 24 hour highly competitive hackathon where you need to be fast at developing this proof of concept, what architecture would you choose? Congratulations! Now that you have won the hackathon (and helped your savings ;) ), it is time to actually build the mobile application. It goes without saying that this application should be robust with minimal bugs, so that it can be safely deployed and adopted by the ministry. So, in order for you to be confident with your code, it is recommended to follow a TDD approach in order to catch bugs early on and make sure that you have a higher overall test coverage. One thing to keep in mind as well is that this application is not a basic CRUD one. It has multiple views with eventual complex operations (like sending vaccine SMS and their reminders, automatically rescheduling missed appointments, etc.). Having taken all of the above into consideration, what would be the architectural style that you would choose? What refactoring would you suggest for both the web and mobile applications ? What architectures would you then suggest?","title":"Questions"},{"location":"tp3/","text":"Download PDF \u00b6 Introduction \u00b6 A software company (GLx) wants to build a forecast and planning solution (F&P) for a fashion retailer, to help them predict their future sales and figure out which goods are needed for each store, location, channel and on any given day, and this in order to be able to order the right amount to fulfill the demand. Then comes the \"planning\" side of the solution, where retail planners can benefit from the best planning strategies and use both these strategies and the generated forecast in order to plan a compelling assortment of products with the right choice count, depth and breadth; or how to build optimized price and promotional strategies. The team (UI, backend and data engineers) of GLx has already held multiple meetings with the client in order to figure out the functional and non-functional requirements of this solution and they have agreed that there needs to be 3 applications: 2 web applications (One for forecasting and one for planning) and another headless application. Functional requirements \u00b6 Forecast Application: The client can choose a given store, day and product and visualize the forecast of its sales at any date within a 1 year interval before and after the current date. The client can choose a given store, day and product and visualize how many items should be provisioned to fulfill the future demand. In some situations, the client can choose to \u201coverride\u201d the value of the forecast and submit it. The client can also select a product and correct some of its historical sale units, then ask to trigger a real time forecast for it. The client can view an aggregated view of the sales or forecast across weeks or months. The client can visualize the products and their descriptions, the stores and their descriptions, etc \u2026 Planning Application: Use the generated forecast to break down financial budgets into categories and stores. Use the generated forecast to create plans for more accurate product assortment decisions. Use the generated forecast to create plans for appropriate promotional strategies, etc \u2026 Headless Application: The client will be sending batches of structured CSV files (historical sales of 2 years, list of products, stores, etc ...) on a weekly basis (presumably during the weekend). The solution should be able to process these huge amounts of data in order to generate forecasts and plans (results will be persisted into a storage layer). During that time, both web applications will be down as we are writing into the database. Once the batch finishes, both applications will be up again and the users should be able to query and view the new results that have been generated by this batch. Common use cases: Authentication/Authorization: Each user should be authenticated before accessing either of the 2 web applications. Note that users can be forecasters, planners, and some of them can be both. Non Functional requirements & Other constraints \u00b6 The UI needs to be highly responsive, especially when dealing with repetitive user actions that may trigger some heavy calculations. This is the first time that GLx builds an F&P application so the solution will definitely need to be modified to fix bugs and/or improve performance, etc... GLx is not only trying to build an F&P solution for this retailer, but as the forecast and planning features can be interesting for any other retailer, the team is also thinking about building a product that can easily be configured for future retailers without having to build a custom solution for each client. We need to have the forecast and planning applications to be independently deployed. A secure communication between the forecast and planning applications should be ensured, as well as between the applications and database layer. Questions \u00b6 In class, choose and explain the appropriate architecture for the described solution. As a homework, implement few use cases of this solution [TBD in class] by explaining your choice of technologies as well.","title":"Lab3 - Microservices Architecture"},{"location":"tp3/#download-pdf","text":"","title":"Download PDF"},{"location":"tp3/#introduction","text":"A software company (GLx) wants to build a forecast and planning solution (F&P) for a fashion retailer, to help them predict their future sales and figure out which goods are needed for each store, location, channel and on any given day, and this in order to be able to order the right amount to fulfill the demand. Then comes the \"planning\" side of the solution, where retail planners can benefit from the best planning strategies and use both these strategies and the generated forecast in order to plan a compelling assortment of products with the right choice count, depth and breadth; or how to build optimized price and promotional strategies. The team (UI, backend and data engineers) of GLx has already held multiple meetings with the client in order to figure out the functional and non-functional requirements of this solution and they have agreed that there needs to be 3 applications: 2 web applications (One for forecasting and one for planning) and another headless application.","title":"Introduction"},{"location":"tp3/#functional-requirements","text":"Forecast Application: The client can choose a given store, day and product and visualize the forecast of its sales at any date within a 1 year interval before and after the current date. The client can choose a given store, day and product and visualize how many items should be provisioned to fulfill the future demand. In some situations, the client can choose to \u201coverride\u201d the value of the forecast and submit it. The client can also select a product and correct some of its historical sale units, then ask to trigger a real time forecast for it. The client can view an aggregated view of the sales or forecast across weeks or months. The client can visualize the products and their descriptions, the stores and their descriptions, etc \u2026 Planning Application: Use the generated forecast to break down financial budgets into categories and stores. Use the generated forecast to create plans for more accurate product assortment decisions. Use the generated forecast to create plans for appropriate promotional strategies, etc \u2026 Headless Application: The client will be sending batches of structured CSV files (historical sales of 2 years, list of products, stores, etc ...) on a weekly basis (presumably during the weekend). The solution should be able to process these huge amounts of data in order to generate forecasts and plans (results will be persisted into a storage layer). During that time, both web applications will be down as we are writing into the database. Once the batch finishes, both applications will be up again and the users should be able to query and view the new results that have been generated by this batch. Common use cases: Authentication/Authorization: Each user should be authenticated before accessing either of the 2 web applications. Note that users can be forecasters, planners, and some of them can be both.","title":"Functional requirements"},{"location":"tp3/#non-functional-requirements-other-constraints","text":"The UI needs to be highly responsive, especially when dealing with repetitive user actions that may trigger some heavy calculations. This is the first time that GLx builds an F&P application so the solution will definitely need to be modified to fix bugs and/or improve performance, etc... GLx is not only trying to build an F&P solution for this retailer, but as the forecast and planning features can be interesting for any other retailer, the team is also thinking about building a product that can easily be configured for future retailers without having to build a custom solution for each client. We need to have the forecast and planning applications to be independently deployed. A secure communication between the forecast and planning applications should be ensured, as well as between the applications and database layer.","title":"Non Functional requirements &amp; Other constraints"},{"location":"tp3/#questions","text":"In class, choose and explain the appropriate architecture for the described solution. As a homework, implement few use cases of this solution [TBD in class] by explaining your choice of technologies as well.","title":"Questions"},{"location":"tp4/","text":"Download PDF \u00b6 Requirements \u00b6 The GLx team has been asked to build a loan management module of an existing banking application in order to automate the following steps of a loan process: The client fills in the application form and uploads the list of required documents. The loan application is first processed by the commercial service, whose task is to check the eligibility of the borrower and the repayment terms and period, based on the borrower\u2019s income and financial situation. An initial scoring is established to assess the eligibility of the client to get the loan. Once done, the client application is then processed by the risk management service in order to make sure that the suggested debt ratio is sufficient enough to maintain a healthy bank account balance for the borrower and that the loan can still be repaid in full as scheduled. This service also has access to the central bank database in order to assess if there are other outstanding commitments with other banks and that have not been paid. The output of this service is a final score which dictates if the borrower\u2019s request should be approved or not. The client is then notified whether his application for a loan has been approved (in principle) or not. Next, the final step will be established by the credit service that elaborates the credit agreement to be signed and the amortization table. Both documents can be later viewed/downloaded by the client. Note that the commercial service and the risk management one should use some OCR capabilities in order to automate the extraction and processing of the needed information within the uploaded documents. Questions \u00b6 In class, choose and explain the appropriate architecture for this loan management module. As a homework, implement few use cases [TBD in class] by explaining your choice of technologies as well.","title":"Lab4 - Towards more reactive microservices"},{"location":"tp4/#download-pdf","text":"","title":"Download PDF"},{"location":"tp4/#requirements","text":"The GLx team has been asked to build a loan management module of an existing banking application in order to automate the following steps of a loan process: The client fills in the application form and uploads the list of required documents. The loan application is first processed by the commercial service, whose task is to check the eligibility of the borrower and the repayment terms and period, based on the borrower\u2019s income and financial situation. An initial scoring is established to assess the eligibility of the client to get the loan. Once done, the client application is then processed by the risk management service in order to make sure that the suggested debt ratio is sufficient enough to maintain a healthy bank account balance for the borrower and that the loan can still be repaid in full as scheduled. This service also has access to the central bank database in order to assess if there are other outstanding commitments with other banks and that have not been paid. The output of this service is a final score which dictates if the borrower\u2019s request should be approved or not. The client is then notified whether his application for a loan has been approved (in principle) or not. Next, the final step will be established by the credit service that elaborates the credit agreement to be signed and the amortization table. Both documents can be later viewed/downloaded by the client. Note that the commercial service and the risk management one should use some OCR capabilities in order to automate the extraction and processing of the needed information within the uploaded documents.","title":"Requirements"},{"location":"tp4/#questions","text":"In class, choose and explain the appropriate architecture for this loan management module. As a homework, implement few use cases [TBD in class] by explaining your choice of technologies as well.","title":"Questions"},{"location":"tp5/","text":"Download PDF \u00b6 Requirements \u00b6 The GLx team has been asked to build a backend solution of an online shopping web application that revolves around the following main usecases: A customer can view products. A customer can make purchases. A customer can view and update his/her shopping cart. A warehouse manager can manage inventory by viewing the list of products, adding new ones or removing existing ones. In case a product is out of stock, a customer can subscribe to that product and once it is back in stock, he/she is notified through an email. Questions \u00b6 In class, there will be two groups, each working on its solution. Each group will be divided into teams where each team will work on a component of the solution. Each group has to choose a team lead who will assist discussions around which architecture to choose and who will oversee the teams and coordinate the efforts towards bringing the project across the finish line.","title":"Lab5 - A hybrid software architecture"},{"location":"tp5/#download-pdf","text":"","title":"Download PDF"},{"location":"tp5/#requirements","text":"The GLx team has been asked to build a backend solution of an online shopping web application that revolves around the following main usecases: A customer can view products. A customer can make purchases. A customer can view and update his/her shopping cart. A warehouse manager can manage inventory by viewing the list of products, adding new ones or removing existing ones. In case a product is out of stock, a customer can subscribe to that product and once it is back in stock, he/she is notified through an email.","title":"Requirements"},{"location":"tp5/#questions","text":"In class, there will be two groups, each working on its solution. Each group will be divided into teams where each team will work on a component of the solution. Each group has to choose a team lead who will assist discussions around which architecture to choose and who will oversee the teams and coordinate the efforts towards bringing the project across the finish line.","title":"Questions"}]}