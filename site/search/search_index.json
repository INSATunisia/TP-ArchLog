{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GL4/RT5 - INSAT \u00b6 Course materials: https://liliasfaxi.wixsite.com/liliasfaxi/architecture-logicielle Github repository : https://github.com/INSATunisia Overview \u00b6 These labs provide hands-on scenarios to experiment with different software architectures. This work is made available under the terms of the Creative Commons attribution-NonCommercial ShareAlike 4.0 international license .","title":"Software Architecure Labs"},{"location":"#gl4rt5-insat","text":"Course materials: https://liliasfaxi.wixsite.com/liliasfaxi/architecture-logicielle Github repository : https://github.com/INSATunisia","title":"GL4/RT5 - INSAT"},{"location":"#overview","text":"These labs provide hands-on scenarios to experiment with different software architectures. This work is made available under the terms of the Creative Commons attribution-NonCommercial ShareAlike 4.0 international license .","title":"Overview"},{"location":"tp-ds/","text":"T\u00e9l\u00e9charger PDF \u00b6 Objectifs du TP \u00b6 Cr\u00e9ation de microservices avec Spring Boot et Spring Cloud D\u00e9ploiement d'un microservice sur plusieurs instances Acknowledgement \u00b6 Ce TP a \u00e9t\u00e9 largement inspir\u00e9 du travail d'un bin\u00f4me d'\u00e9tudiants en G\u00e9nie Logiciel \u00e0 l'INSAT, promotion 2017 (Houssem Ben Braiek et Hadhemi Jabnoun), que je tiens \u00e0 f\u00e9liciter et remercier. Outils et Versions \u00b6 Spring Boot Version: 3.0.0 Spring Cloud Version 2021.0.5 IntelliJ IDEA Version Ultimate 2021.1.1 (ou tout autre IDE de votre choix) Info Vous trouverez dans la Classroom un lien pour activer la version \u00e9tudiant de IntelliJ Ultimate. La version grauite ne permet pas de r\u00e9aliser le TP. Architecture Microservices \u00b6 Pr\u00e9sentation \u00b6 Une architecture Microservices repr\u00e9sente un moyen de concevoir les applications comme ensemble de services ind\u00e9pendamment d\u00e9ployables. Ces services doivent de pr\u00e9f\u00e9rence \u00eatre organis\u00e9s autours des comp\u00e9tences m\u00e9tier, de d\u00e9ploiement automatique, d'extr\u00e9mit\u00e9s intelligentes et de contr\u00f4le d\u00e9centralis\u00e9 des technologies et des donn\u00e9es. Architecture Propos\u00e9e \u00b6 L'objectif de ce travail est de montrer comment cr\u00e9er plusieurs services ind\u00e9pendamment d\u00e9ployables qui communiquent entre eux, en utilisant les facilit\u00e9s offertes par Spring Cloud et Spring Boot. Spring Cloud fournit des outils pour les d\u00e9veloppeurs pour construire rapidement et facilement des patrons communs de syst\u00e8mes r\u00e9partis (tel que des services de configuration, de d\u00e9couverte ou de routage intelligent). Spring Boot permet de son c\u00f4t\u00e9 de construire des applications Spring rapidement aussi rapidement que possible, en minimisant au maximum le temps de configuration, d'habitude p\u00e9nible, des applications Spring. Nous allons donc cr\u00e9er les microservices suivants: Product Service : Service principal, qui offre une API REST pour lister une liste de produits. Config Service : Service de configuration, dont le r\u00f4le est de centraliser les fichiers de configuration des diff\u00e9rents microservices dans un endroit unique. Proxy Service : Passerelle se chargeant du routage d'une requ\u00eate vers l'une des instances d'un service, de mani\u00e8re \u00e0 g\u00e9rer automatiquement la distribution de charge. Discovery Service : Service permettant l'enregistrement des instances de services en vue d'\u00eatre d\u00e9couvertes par d'autres services. L'architecture r\u00e9sultante aura l'allure suivante: Cr\u00e9ation des Microservices \u00b6 Microservice ProductService \u00b6 Nous commen\u00e7ons par cr\u00e9er le service principal: Product Service . Chaque microservice sera sous la forme d'un projet Spring. Pour cr\u00e9er rapidement et facilement un projet Spring avec toutes les d\u00e9pendances n\u00e9cessaires, Spring Boot fournit Spring Initializr . Pour cela, aller au site start.spring.io , et cr\u00e9er un projet avec les caract\u00e9ristiques suivantes: Projet Maven avec Java et Spring Boot version 3.0.0 Group: tn.insat.tpmicro Artifact: product-service Packaging : Jar Java : 17 (il faudrait installer cette version) D\u00e9pendances: Spring Web Rest Repositories JPA : Java Persistence API H2 : base de donn\u00e9es pour le stockage Actuator : pour le montoring et la gestion de l'application Eureka Discovery : pour l'int\u00e9gration avec le Discovery Service Config Client : pour l'int\u00e9gration avec le Config Service Cliquer sur Generate , un fichier zip sera t\u00e9l\u00e9charg\u00e9. Suivre ensuite les \u00e9tapes suivantes pour cr\u00e9er le microservice ProductService : Ouvrir le projet t\u00e9l\u00e9charg\u00e9 avec IntelliJ IDEA. Sous le r\u00e9pertoire src/main/java et dans le package tn.insat.tpmicro.productservice , cr\u00e9er la classe Product suivante: package tn.insat.tpmicro.productservice ; import javax.persistence.Entity ; import javax.persistence.GeneratedValue ; import javax.persistence.Id ; import java.io.Serializable ; @Entity public class Product implements Serializable { @Id @GeneratedValue private int id ; private String name ; public Product (){ } public Product ( String name ) { this . name = name ; } public int getId () { return id ; } public void setId ( int id ) { this . id = id ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } } Cette classe est annot\u00e9e avec JPA, pour stocker ensuite les objets Product dans la base de donn\u00e9es H2 gr\u00e2ce \u00e0 Spring Data. Pour cela, cr\u00e9er l'interface ProductRepository dans le m\u00eame package: package tn.insat.tpmicro.productservice ; import org.springframework.data.jpa.repository.JpaRepository ; public interface ProductRepository extends JpaRepository < Product , Integer > { } Pour ins\u00e9rer les objets dans la base, nous utiliserons l'objet Stream . Pour cela, nous allons cr\u00e9er la classe DummyDataCLR : package tn.insat.tpmicro.productservice ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.CommandLineRunner ; import org.springframework.stereotype.Component ; import java.util.stream.Stream ; @Component class DummyDataCLR implements CommandLineRunner { @Override public void run ( String ... strings ) throws Exception { Stream . of ( \"Pencil\" , \"Book\" , \"Eraser\" ). forEach ( s -> productRepository . save ( new Product ( s ))); productRepository . findAll (). forEach ( s -> System . out . println ( s . getName ())); } @Autowired private ProductRepository productRepository ; } Nous remarquons ici que le productRepository sera instanci\u00e9 automatiquement gr\u00e2ce au m\u00e9canisme d'injection de d\u00e9pendances, utilis\u00e9 par Spring. Lancer la classe principale. Une base de donn\u00e9es H2 sera cr\u00e9\u00e9e et le CommandLineRunner se chargera de lui injecter les donn\u00e9es. Attention Prenez soin d'utiliser JDK 17! Pour ex\u00e9cuter votre application: Cr\u00e9er une configuration mvn package en faisant Run->Edit Configurations puis en cr\u00e9ant une nouvelle configuration de type Maven avec la commande package comme suit: Un r\u00e9pertoire target sera cr\u00e9\u00e9, contenant les classes g\u00e9n\u00e9r\u00e9es. Lancer ensuite la configuration Spring Boot ProductServiceApplication cr\u00e9\u00e9e par d\u00e9faut par IntelliJ. Le r\u00e9sultat sur la console devrait ressembler \u00e0 ce qui suit: Tip Pour \u00e9viter de lancer \u00e0 chaque fois les deux configurations, ajouter dans la deuxi\u00e8me configuration une d\u00e9pendance vers la premi\u00e8re, rajouter cette derni\u00e8re dans la case Before Launch: Build, Maven Goal, Activate Tool Window , comme suit: Pour tester votre application, ouvrir la page http://localhost:8080 sur le navigateur. Vous obtiendrez (si tout se passe bien) le r\u00e9sultat suivant: Vous remarquerez que le service REST cr\u00e9\u00e9 respecte automatiquement la norme HATEOAS , qui offre dans les services REST, les liens pour naviguer dynamiquement entre les interfaces. Si vous naviguez vers la page http://localhost:8080/products , vous verrez la liste des produits, inject\u00e9s par le CLR, comme suit: Pour voir les informations relatives \u00e0 un seul produit, il suffit de conna\u00eetre son ID: http://localhost:8080/products/1 , par exemple. Pour rajouter une fonctionnalit\u00e9 de recherche par nom, par exemple, modifier l'interface ProductRepository , comme suit: package tn.insat.tpmicro.productservice ; import org.springframework.data.domain.Page ; import org.springframework.data.domain.Pageable ; import org.springframework.data.jpa.repository.JpaRepository ; import org.springframework.data.jpa.repository.Query ; import org.springframework.data.repository.query.Param ; import org.springframework.data.rest.core.annotation.RepositoryRestResource ; @RepositoryRestResource public interface ProductRepository extends JpaRepository < Product , Integer > { @Query ( \"select p from Product p where p.name like :name\" ) public Page < Product > productByName ( @Param ( \"name\" ) String mc , Pageable pageable ); } Pour tester cette fonctionnalit\u00e9 de recherche, aller au lien http://localhost:8080/products/search/productByName?name=Eraser Le r\u00e9sultat obtenu sera le suivant: La d\u00e9pendance Actuator qui a \u00e9t\u00e9 rajout\u00e9e au projet permet d'afficher des informations sur votre API REST sans avoir \u00e0 impl\u00e9menter explicitement la fonctionnalit\u00e9. Par exemple, si vous allez vers http://localhost:8080/metrics , vous pourrez avoir plusieurs informations sur le microservice, tel que le nombre de threads, la capacit\u00e9 m\u00e9moire, la classe charg\u00e9e en m\u00e9moire, etc. Mais d'abord, rajouter les deux lignes suivantes au fichier src/main/resources/application.properties pour (1) afficher des informations plus d\u00e9taill\u00e9es sur l'\u00e9tat du service et (2) d\u00e9sactiver les contraintes de s\u00e9curit\u00e9 par d\u00e9faut: endpoints.health.sensitive = false management.security.enabled = false Relancer le projet. Le r\u00e9sultat obtenu en ex\u00e9cutant http://localhost:8080/metrics sera comme suit: Les informations sur l'\u00e9tat du service sont affich\u00e9es gr\u00e2ce \u00e0 http://localhost:8080/health Plusieurs Instances du Microservice ProductService \u00b6 Nous allons maintenant cr\u00e9er d'autres instances du m\u00eame service et les d\u00e9ployer sur des ports diff\u00e9rents. Pour lancer plusieurs instances du service ProductService , nous allons d\u00e9finir plusieurs configurations avec des num\u00e9ros de port diff\u00e9rents. Pour cela: Aller \u00e0 Run->Edit Configurations , et copier la configuration ProductServiceApplication en la s\u00e9lectionnant dans la barre lat\u00e9rale, et en cliquant sur l'ic\u00f4ne . Une nouvelle configuration sera cr\u00e9\u00e9e. Changer son nom: ProductServiceApplication:8081 Ajouter dans la case Program Arguments l'argument suivant: --server.port = 8081 Lancer la configuration. Un nouveau service sera disponible \u00e0 l'adresse: http://localhost:8081 Tip En ex\u00e9cutant la seconde configuration, un popup s'affiche dans IntelliJ, qui vous demande si vous voulez afficher le dashboard pour visualiser plusieurs instances Spring Boot, comme suit: Cliquer dessus, et choisir : Show Run Configurations in Dashboard . La vue suivante s'affiche, en bas de votre \u00e9cran: Vous pouvez d\u00e9sormais g\u00e9rer vos instances dans cette fen\u00eatre. Refaire les m\u00eames \u00e9tapes pour cr\u00e9er une instance du service tourant sur le port 8082. Microservice ConfigService \u00b6 Dans une architecture microservices, plusieurs services s'ex\u00e9cutent en m\u00eame temps, sur des processus diff\u00e9rents, avec chacun sa propre configuration et ses propres param\u00e8tres. Spring Cloud Config fournit un support c\u00f4t\u00e9 serveur et c\u00f4t\u00e9 client pour externaliser les configurations dans un syst\u00e8me distribu\u00e9. Gr\u00e2ce au service de configuration, il est possible d'avoir un endroit centralis\u00e9 pour g\u00e9rer les propri\u00e9t\u00e9s de chacun de ces services. Pour cela: Commencer par cr\u00e9er un service ConfigService dans Spring Initializr , avec les d\u00e9pendances appropri\u00e9es, comme indiqu\u00e9 sur la figure suivante: Ouvrir le projet dans une autre instance d'IntelliJ IDEA. Pour exposer un service de configuration, utiliser l'annotation @EnableConfigServer pour la classe ConfigServiceApplication , comme suit: package tn.insat.tpmicro.configservice ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.cloud.config.server.EnableConfigServer ; @EnableConfigServer @SpringBootApplication public class ConfigServiceApplication { public static void main ( String [] args ) { SpringApplication . run ( ConfigServiceApplication . class , args ); } } Pour param\u00e9trer ce service de configuration, ajouter dans son fichier application.properties les valeurs suivantes: server.port = 8888 spring.cloud.config.server.git.uri = file:./src/main/resources/myConfig Ceci indique que le service de configuration sera lanc\u00e9 sur le port 8888 et que le r\u00e9pertoire contenant les fichiers de configuration se trouve dans le r\u00e9pertoire src/main/resources/myConfig . Il suffit maintenant de cr\u00e9er ce r\u00e9pertoire. Tip Pour pouvoir r\u00e9f\u00e9rencer un r\u00e9pertoire avec son chemin absolu, utiliser plut\u00f4t file:///<chemin_absolu> . Cr\u00e9er le r\u00e9pertoire myConfig \u00e0 l'arborescence src/main/resources Cr\u00e9er dans ce r\u00e9pertoire le fichier application.properties dans lequel vous ins\u00e9rez l'instruction suivante: global = xxxxx Ce fichier sera partag\u00e9 entre tous les microservices utilisant ce service de configuration. Le r\u00e9pertoire de configuration doit \u00eatre un r\u00e9pertoire git. Pour cela: Ouvrir le terminal avec IntelliJ et naviguer vers ce r\u00e9pertoire. Initialiser votre r\u00e9pertoire: git init Cr\u00e9er une entr\u00e9e racine dans le repository: git add . Faire un commit: git commit -m \"add .\" Revenir vers le projet ProductService et ajouter dans le fichier de configuration application.properties : spring.application.name = product-service spring.cloud.config.uri = http://localhost:8888 Red\u00e9marrer vos services. Pour consulter le service de configuration, aller \u00e0 http://localhost:8888/product-service/master . Vous verrez le fichier JSON suivant: { name : \"product-service\" , profiles : [ \"master\" ], label : null , version : \"6e1ea61d706133e2d8b62f40c6b784192fb58e8a\" , state : null , propertySources : [ { name : \"file:./src/main/resources/myConfig/application.properties\" , source : { global : \"xxxxx\" } } ] } Comme le fichier application.properties contient toutes les propri\u00e9t\u00e9s partag\u00e9es des diff\u00e9rents microservices, nous aurons besoins d'autres fichiers pour les propri\u00e9t\u00e9s sp\u00e9cifiques \u00e0 un microservice. Pour cela: Cr\u00e9er dans le r\u00e9pertoire myConfig un fichier product-service.properties pour le service ProductService . Attention Le nom du fichier doit correspondre \u00e0 la propri\u00e9t\u00e9 spring.application.name que vous avez saisi dans le fichier application.properties de votre microservice! Ajouter les propri\u00e9t\u00e9s de votre service, \u00e0 savoir, par exemple: me = lilia.sfaxi@insat.rnu.tn Relancer le microservice de configuration. En consultant l'url http://localhost:8888/product-service/master , nous remarquons l'ajout de la nouvelle propri\u00e9t\u00e9. { name : \"product-service\" , profiles : [ \"master\" ], label : null , version : \"6e1ea61d706133e2d8b62f40c6b784192fb58e8a\" , state : null , propertySources : [ { name : \"file:./src/main/resources/myConfig/product-service.properties\" , source : { me : \"lilia.sfaxi@insat.rnu.tn\" } }, { name : \"file:./src/main/resources/myConfig/application.properties\" , source : { global : \"xxxxx\" } } ] } Nous allons maintenant d\u00e9finir un appel REST \u00e0 cette propri\u00e9t\u00e9. Pour cela: Cr\u00e9er la classe ProductRestService dans le projet product-service . Son code ressemblera \u00e0 ce qui suit: package tn.insat.tpmicro.productservice ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController public class ProductRestService { @Value ( \"${me}\" ) private String me ; @RequestMapping ( \"/messages\" ) public String tellMe (){ System . out . println ( \"c'est moi qui ai r\u00e9pondu!\" ); return me ; } } Red\u00e9marrer les trois instances du service, puis appeler dans votre navigateur le service en tapant: http://localhost:8080/messages . Vous verrez le r\u00e9sultat suivant sur le navigateur: Consulter votre Spring Dashboard, vous verrez le message suivant dans la console de l'instance du service lanc\u00e9e sur le port 8080: Microservice DiscoveryService \u00b6 Pour \u00e9viter un couplage fort entre microservices, il est fortement recommand\u00e9 d'utiliser un service de d\u00e9couverte qui permet d'enregistrer les propri\u00e9t\u00e9s des diff\u00e9rents services et d'\u00e9viter ainsi d'avoir \u00e0 appeler un service directement. Au lieu de cela, le service de d\u00e9couverte fournira dynamiquement les informations n\u00e9cessaires, ce qui permet d'assurer l'\u00e9lasticit\u00e9 et la dynamicit\u00e9 propres \u00e0 une architecture microservices. Pour r\u00e9aliser cela, Netflix offre le service Eureka Service Registration and Discovery , que nous allons utiliser dans notre application. Revenir \u00e0 Spring Initializr et cr\u00e9er un nouveau projet Spring Boot intitul\u00e9 discovery-service avec les d\u00e9pendances Eureka Server et Config Client . Lancer le projet avec IntelliJ. Dans la classe DiscoveryServiceApplication , ajouter l'annotation EnableEurekaServer . package tn.insat.tpmicro.discoveryservice ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer ; @EnableEurekaServer @SpringBootApplication public class DiscoveryServiceApplication { public static void main ( String [] args ) { SpringApplication . run ( DiscoveryServiceApplication . class , args ); } } Ajouter les propri\u00e9t\u00e9s suivantes dans son fichier application.properties . spring.application.name = discovery-service spring.cloud.config.uri = http://localhost:8888 Dans le projet config-service , cr\u00e9er un fichier discovery-service.properties sous le r\u00e9pertoire myConfig . Ajouter les propri\u00e9t\u00e9s suivantes pour (1) d\u00e9finir le port par d\u00e9faut du service de d\u00e9couverte et (2) emp\u00eacher un auto-enregistrement du service Eureka. server.port = 8761 eureka.client.fetch-registry = false eureka.client.register-with-eureka = false Pour consulter le service Eureka, aller \u00e0 http://localhost:8761 , l'interface suivante s'affiche: Nous remarquons qu'aucune instance n'est inscrite dans le serveur de d\u00e9couverte. Nous allons donc modifier le code de la classe ProductServiceApplication pour que le microservice ProductService s'enregistre: package tn.insat.tpmicro.productservice ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.cloud.client.discovery.EnableDiscoveryClient ; @EnableDiscoveryClient @SpringBootApplication public class ProductServiceApplication { public static void main ( String [] args ) { SpringApplication . run ( ProductServiceApplication . class , args ); } } Red\u00e9marrer les trois instances de services ProductService et actualiser la fen\u00eatre de Eureka , vous verrez qu'un seul service est d\u00e9clar\u00e9, avec trois adresses diff\u00e9rentes. Microservice ProxyService \u00b6 L'architecture microservices, en fournissant un ensemble de services ind\u00e9pendants et faiblement coupl\u00e9s, se trouve confront\u00e9e au challenge de fournir une interface unifi\u00e9e pour les consommateurs, de mani\u00e8re \u00e0 ce qu'ils ne voient pas la d\u00e9composition \u00e0 faible granularit\u00e9 de vos services. C'est pour cela que l'utilisation d'un service proxy, responsable du routage des requ\u00eates et de la r\u00e9partition de charge, est important. Netflix offre le service Zuul pour r\u00e9aliser cela. Pour cr\u00e9er votre microservice Proxy: Aller \u00e0 Spring Initializr . Cr\u00e9er le projet proxy-service avec les d\u00e9pendances suivantes: Zuul, Web, HATEOAS, Actuator, Config Client et Eureka Discovery. Ouvrir le service avec IntelliJ IDEA. Ajouter \u00e0 la classe ProxyServiceApplication l'annotation @EnableZuulProxy , ainsi que @EnableDiscoveryClient pour que le proxy soit \u00e9galement enregistr\u00e9 dans le service de d\u00e9couverte. Ajouter les propri\u00e9t\u00e9s spring.application.name et spring.cloud.config.uri dans le fichier application.properties du service proxy. Cr\u00e9er le fichier proxy-service.properties dans le r\u00e9pertoire myConfig du service de configuration, dans lequel vous allez fixer le port du service proxy \u00e0 9999. En lan\u00e7ant le service Proxy, vous remarquerez qu'il est rajout\u00e9 dans Eureka. Si vous ex\u00e9cutez la requ\u00eate http://localhost:9999/product-service/messages plusieurs fois, vous remarquerez que l'affichage c'est moi qui ai r\u00e9pondu! s'affichera sur les consoles des trois instances respectivement, \u00e0 tour de r\u00f4le.","title":"Tp ds"},{"location":"tp-ds/#telecharger-pdf","text":"","title":"T\u00e9l\u00e9charger PDF"},{"location":"tp-ds/#objectifs-du-tp","text":"Cr\u00e9ation de microservices avec Spring Boot et Spring Cloud D\u00e9ploiement d'un microservice sur plusieurs instances","title":"Objectifs du TP"},{"location":"tp-ds/#acknowledgement","text":"Ce TP a \u00e9t\u00e9 largement inspir\u00e9 du travail d'un bin\u00f4me d'\u00e9tudiants en G\u00e9nie Logiciel \u00e0 l'INSAT, promotion 2017 (Houssem Ben Braiek et Hadhemi Jabnoun), que je tiens \u00e0 f\u00e9liciter et remercier.","title":"Acknowledgement"},{"location":"tp-ds/#outils-et-versions","text":"Spring Boot Version: 3.0.0 Spring Cloud Version 2021.0.5 IntelliJ IDEA Version Ultimate 2021.1.1 (ou tout autre IDE de votre choix) Info Vous trouverez dans la Classroom un lien pour activer la version \u00e9tudiant de IntelliJ Ultimate. La version grauite ne permet pas de r\u00e9aliser le TP.","title":"Outils et Versions"},{"location":"tp-ds/#architecture-microservices","text":"","title":"Architecture Microservices"},{"location":"tp-ds/#presentation","text":"Une architecture Microservices repr\u00e9sente un moyen de concevoir les applications comme ensemble de services ind\u00e9pendamment d\u00e9ployables. Ces services doivent de pr\u00e9f\u00e9rence \u00eatre organis\u00e9s autours des comp\u00e9tences m\u00e9tier, de d\u00e9ploiement automatique, d'extr\u00e9mit\u00e9s intelligentes et de contr\u00f4le d\u00e9centralis\u00e9 des technologies et des donn\u00e9es.","title":"Pr\u00e9sentation"},{"location":"tp-ds/#architecture-proposee","text":"L'objectif de ce travail est de montrer comment cr\u00e9er plusieurs services ind\u00e9pendamment d\u00e9ployables qui communiquent entre eux, en utilisant les facilit\u00e9s offertes par Spring Cloud et Spring Boot. Spring Cloud fournit des outils pour les d\u00e9veloppeurs pour construire rapidement et facilement des patrons communs de syst\u00e8mes r\u00e9partis (tel que des services de configuration, de d\u00e9couverte ou de routage intelligent). Spring Boot permet de son c\u00f4t\u00e9 de construire des applications Spring rapidement aussi rapidement que possible, en minimisant au maximum le temps de configuration, d'habitude p\u00e9nible, des applications Spring. Nous allons donc cr\u00e9er les microservices suivants: Product Service : Service principal, qui offre une API REST pour lister une liste de produits. Config Service : Service de configuration, dont le r\u00f4le est de centraliser les fichiers de configuration des diff\u00e9rents microservices dans un endroit unique. Proxy Service : Passerelle se chargeant du routage d'une requ\u00eate vers l'une des instances d'un service, de mani\u00e8re \u00e0 g\u00e9rer automatiquement la distribution de charge. Discovery Service : Service permettant l'enregistrement des instances de services en vue d'\u00eatre d\u00e9couvertes par d'autres services. L'architecture r\u00e9sultante aura l'allure suivante:","title":"Architecture Propos\u00e9e"},{"location":"tp-ds/#creation-des-microservices","text":"","title":"Cr\u00e9ation des Microservices"},{"location":"tp-ds/#microservice-productservice","text":"Nous commen\u00e7ons par cr\u00e9er le service principal: Product Service . Chaque microservice sera sous la forme d'un projet Spring. Pour cr\u00e9er rapidement et facilement un projet Spring avec toutes les d\u00e9pendances n\u00e9cessaires, Spring Boot fournit Spring Initializr . Pour cela, aller au site start.spring.io , et cr\u00e9er un projet avec les caract\u00e9ristiques suivantes: Projet Maven avec Java et Spring Boot version 3.0.0 Group: tn.insat.tpmicro Artifact: product-service Packaging : Jar Java : 17 (il faudrait installer cette version) D\u00e9pendances: Spring Web Rest Repositories JPA : Java Persistence API H2 : base de donn\u00e9es pour le stockage Actuator : pour le montoring et la gestion de l'application Eureka Discovery : pour l'int\u00e9gration avec le Discovery Service Config Client : pour l'int\u00e9gration avec le Config Service Cliquer sur Generate , un fichier zip sera t\u00e9l\u00e9charg\u00e9. Suivre ensuite les \u00e9tapes suivantes pour cr\u00e9er le microservice ProductService : Ouvrir le projet t\u00e9l\u00e9charg\u00e9 avec IntelliJ IDEA. Sous le r\u00e9pertoire src/main/java et dans le package tn.insat.tpmicro.productservice , cr\u00e9er la classe Product suivante: package tn.insat.tpmicro.productservice ; import javax.persistence.Entity ; import javax.persistence.GeneratedValue ; import javax.persistence.Id ; import java.io.Serializable ; @Entity public class Product implements Serializable { @Id @GeneratedValue private int id ; private String name ; public Product (){ } public Product ( String name ) { this . name = name ; } public int getId () { return id ; } public void setId ( int id ) { this . id = id ; } public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } } Cette classe est annot\u00e9e avec JPA, pour stocker ensuite les objets Product dans la base de donn\u00e9es H2 gr\u00e2ce \u00e0 Spring Data. Pour cela, cr\u00e9er l'interface ProductRepository dans le m\u00eame package: package tn.insat.tpmicro.productservice ; import org.springframework.data.jpa.repository.JpaRepository ; public interface ProductRepository extends JpaRepository < Product , Integer > { } Pour ins\u00e9rer les objets dans la base, nous utiliserons l'objet Stream . Pour cela, nous allons cr\u00e9er la classe DummyDataCLR : package tn.insat.tpmicro.productservice ; import org.springframework.beans.factory.annotation.Autowired ; import org.springframework.boot.CommandLineRunner ; import org.springframework.stereotype.Component ; import java.util.stream.Stream ; @Component class DummyDataCLR implements CommandLineRunner { @Override public void run ( String ... strings ) throws Exception { Stream . of ( \"Pencil\" , \"Book\" , \"Eraser\" ). forEach ( s -> productRepository . save ( new Product ( s ))); productRepository . findAll (). forEach ( s -> System . out . println ( s . getName ())); } @Autowired private ProductRepository productRepository ; } Nous remarquons ici que le productRepository sera instanci\u00e9 automatiquement gr\u00e2ce au m\u00e9canisme d'injection de d\u00e9pendances, utilis\u00e9 par Spring. Lancer la classe principale. Une base de donn\u00e9es H2 sera cr\u00e9\u00e9e et le CommandLineRunner se chargera de lui injecter les donn\u00e9es. Attention Prenez soin d'utiliser JDK 17! Pour ex\u00e9cuter votre application: Cr\u00e9er une configuration mvn package en faisant Run->Edit Configurations puis en cr\u00e9ant une nouvelle configuration de type Maven avec la commande package comme suit: Un r\u00e9pertoire target sera cr\u00e9\u00e9, contenant les classes g\u00e9n\u00e9r\u00e9es. Lancer ensuite la configuration Spring Boot ProductServiceApplication cr\u00e9\u00e9e par d\u00e9faut par IntelliJ. Le r\u00e9sultat sur la console devrait ressembler \u00e0 ce qui suit: Tip Pour \u00e9viter de lancer \u00e0 chaque fois les deux configurations, ajouter dans la deuxi\u00e8me configuration une d\u00e9pendance vers la premi\u00e8re, rajouter cette derni\u00e8re dans la case Before Launch: Build, Maven Goal, Activate Tool Window , comme suit: Pour tester votre application, ouvrir la page http://localhost:8080 sur le navigateur. Vous obtiendrez (si tout se passe bien) le r\u00e9sultat suivant: Vous remarquerez que le service REST cr\u00e9\u00e9 respecte automatiquement la norme HATEOAS , qui offre dans les services REST, les liens pour naviguer dynamiquement entre les interfaces. Si vous naviguez vers la page http://localhost:8080/products , vous verrez la liste des produits, inject\u00e9s par le CLR, comme suit: Pour voir les informations relatives \u00e0 un seul produit, il suffit de conna\u00eetre son ID: http://localhost:8080/products/1 , par exemple. Pour rajouter une fonctionnalit\u00e9 de recherche par nom, par exemple, modifier l'interface ProductRepository , comme suit: package tn.insat.tpmicro.productservice ; import org.springframework.data.domain.Page ; import org.springframework.data.domain.Pageable ; import org.springframework.data.jpa.repository.JpaRepository ; import org.springframework.data.jpa.repository.Query ; import org.springframework.data.repository.query.Param ; import org.springframework.data.rest.core.annotation.RepositoryRestResource ; @RepositoryRestResource public interface ProductRepository extends JpaRepository < Product , Integer > { @Query ( \"select p from Product p where p.name like :name\" ) public Page < Product > productByName ( @Param ( \"name\" ) String mc , Pageable pageable ); } Pour tester cette fonctionnalit\u00e9 de recherche, aller au lien http://localhost:8080/products/search/productByName?name=Eraser Le r\u00e9sultat obtenu sera le suivant: La d\u00e9pendance Actuator qui a \u00e9t\u00e9 rajout\u00e9e au projet permet d'afficher des informations sur votre API REST sans avoir \u00e0 impl\u00e9menter explicitement la fonctionnalit\u00e9. Par exemple, si vous allez vers http://localhost:8080/metrics , vous pourrez avoir plusieurs informations sur le microservice, tel que le nombre de threads, la capacit\u00e9 m\u00e9moire, la classe charg\u00e9e en m\u00e9moire, etc. Mais d'abord, rajouter les deux lignes suivantes au fichier src/main/resources/application.properties pour (1) afficher des informations plus d\u00e9taill\u00e9es sur l'\u00e9tat du service et (2) d\u00e9sactiver les contraintes de s\u00e9curit\u00e9 par d\u00e9faut: endpoints.health.sensitive = false management.security.enabled = false Relancer le projet. Le r\u00e9sultat obtenu en ex\u00e9cutant http://localhost:8080/metrics sera comme suit: Les informations sur l'\u00e9tat du service sont affich\u00e9es gr\u00e2ce \u00e0 http://localhost:8080/health","title":"Microservice ProductService"},{"location":"tp-ds/#plusieurs-instances-du-microservice-productservice","text":"Nous allons maintenant cr\u00e9er d'autres instances du m\u00eame service et les d\u00e9ployer sur des ports diff\u00e9rents. Pour lancer plusieurs instances du service ProductService , nous allons d\u00e9finir plusieurs configurations avec des num\u00e9ros de port diff\u00e9rents. Pour cela: Aller \u00e0 Run->Edit Configurations , et copier la configuration ProductServiceApplication en la s\u00e9lectionnant dans la barre lat\u00e9rale, et en cliquant sur l'ic\u00f4ne . Une nouvelle configuration sera cr\u00e9\u00e9e. Changer son nom: ProductServiceApplication:8081 Ajouter dans la case Program Arguments l'argument suivant: --server.port = 8081 Lancer la configuration. Un nouveau service sera disponible \u00e0 l'adresse: http://localhost:8081 Tip En ex\u00e9cutant la seconde configuration, un popup s'affiche dans IntelliJ, qui vous demande si vous voulez afficher le dashboard pour visualiser plusieurs instances Spring Boot, comme suit: Cliquer dessus, et choisir : Show Run Configurations in Dashboard . La vue suivante s'affiche, en bas de votre \u00e9cran: Vous pouvez d\u00e9sormais g\u00e9rer vos instances dans cette fen\u00eatre. Refaire les m\u00eames \u00e9tapes pour cr\u00e9er une instance du service tourant sur le port 8082.","title":"Plusieurs Instances du Microservice ProductService"},{"location":"tp-ds/#microservice-configservice","text":"Dans une architecture microservices, plusieurs services s'ex\u00e9cutent en m\u00eame temps, sur des processus diff\u00e9rents, avec chacun sa propre configuration et ses propres param\u00e8tres. Spring Cloud Config fournit un support c\u00f4t\u00e9 serveur et c\u00f4t\u00e9 client pour externaliser les configurations dans un syst\u00e8me distribu\u00e9. Gr\u00e2ce au service de configuration, il est possible d'avoir un endroit centralis\u00e9 pour g\u00e9rer les propri\u00e9t\u00e9s de chacun de ces services. Pour cela: Commencer par cr\u00e9er un service ConfigService dans Spring Initializr , avec les d\u00e9pendances appropri\u00e9es, comme indiqu\u00e9 sur la figure suivante: Ouvrir le projet dans une autre instance d'IntelliJ IDEA. Pour exposer un service de configuration, utiliser l'annotation @EnableConfigServer pour la classe ConfigServiceApplication , comme suit: package tn.insat.tpmicro.configservice ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.cloud.config.server.EnableConfigServer ; @EnableConfigServer @SpringBootApplication public class ConfigServiceApplication { public static void main ( String [] args ) { SpringApplication . run ( ConfigServiceApplication . class , args ); } } Pour param\u00e9trer ce service de configuration, ajouter dans son fichier application.properties les valeurs suivantes: server.port = 8888 spring.cloud.config.server.git.uri = file:./src/main/resources/myConfig Ceci indique que le service de configuration sera lanc\u00e9 sur le port 8888 et que le r\u00e9pertoire contenant les fichiers de configuration se trouve dans le r\u00e9pertoire src/main/resources/myConfig . Il suffit maintenant de cr\u00e9er ce r\u00e9pertoire. Tip Pour pouvoir r\u00e9f\u00e9rencer un r\u00e9pertoire avec son chemin absolu, utiliser plut\u00f4t file:///<chemin_absolu> . Cr\u00e9er le r\u00e9pertoire myConfig \u00e0 l'arborescence src/main/resources Cr\u00e9er dans ce r\u00e9pertoire le fichier application.properties dans lequel vous ins\u00e9rez l'instruction suivante: global = xxxxx Ce fichier sera partag\u00e9 entre tous les microservices utilisant ce service de configuration. Le r\u00e9pertoire de configuration doit \u00eatre un r\u00e9pertoire git. Pour cela: Ouvrir le terminal avec IntelliJ et naviguer vers ce r\u00e9pertoire. Initialiser votre r\u00e9pertoire: git init Cr\u00e9er une entr\u00e9e racine dans le repository: git add . Faire un commit: git commit -m \"add .\" Revenir vers le projet ProductService et ajouter dans le fichier de configuration application.properties : spring.application.name = product-service spring.cloud.config.uri = http://localhost:8888 Red\u00e9marrer vos services. Pour consulter le service de configuration, aller \u00e0 http://localhost:8888/product-service/master . Vous verrez le fichier JSON suivant: { name : \"product-service\" , profiles : [ \"master\" ], label : null , version : \"6e1ea61d706133e2d8b62f40c6b784192fb58e8a\" , state : null , propertySources : [ { name : \"file:./src/main/resources/myConfig/application.properties\" , source : { global : \"xxxxx\" } } ] } Comme le fichier application.properties contient toutes les propri\u00e9t\u00e9s partag\u00e9es des diff\u00e9rents microservices, nous aurons besoins d'autres fichiers pour les propri\u00e9t\u00e9s sp\u00e9cifiques \u00e0 un microservice. Pour cela: Cr\u00e9er dans le r\u00e9pertoire myConfig un fichier product-service.properties pour le service ProductService . Attention Le nom du fichier doit correspondre \u00e0 la propri\u00e9t\u00e9 spring.application.name que vous avez saisi dans le fichier application.properties de votre microservice! Ajouter les propri\u00e9t\u00e9s de votre service, \u00e0 savoir, par exemple: me = lilia.sfaxi@insat.rnu.tn Relancer le microservice de configuration. En consultant l'url http://localhost:8888/product-service/master , nous remarquons l'ajout de la nouvelle propri\u00e9t\u00e9. { name : \"product-service\" , profiles : [ \"master\" ], label : null , version : \"6e1ea61d706133e2d8b62f40c6b784192fb58e8a\" , state : null , propertySources : [ { name : \"file:./src/main/resources/myConfig/product-service.properties\" , source : { me : \"lilia.sfaxi@insat.rnu.tn\" } }, { name : \"file:./src/main/resources/myConfig/application.properties\" , source : { global : \"xxxxx\" } } ] } Nous allons maintenant d\u00e9finir un appel REST \u00e0 cette propri\u00e9t\u00e9. Pour cela: Cr\u00e9er la classe ProductRestService dans le projet product-service . Son code ressemblera \u00e0 ce qui suit: package tn.insat.tpmicro.productservice ; import org.springframework.beans.factory.annotation.Value ; import org.springframework.web.bind.annotation.RequestMapping ; import org.springframework.web.bind.annotation.RestController ; @RestController public class ProductRestService { @Value ( \"${me}\" ) private String me ; @RequestMapping ( \"/messages\" ) public String tellMe (){ System . out . println ( \"c'est moi qui ai r\u00e9pondu!\" ); return me ; } } Red\u00e9marrer les trois instances du service, puis appeler dans votre navigateur le service en tapant: http://localhost:8080/messages . Vous verrez le r\u00e9sultat suivant sur le navigateur: Consulter votre Spring Dashboard, vous verrez le message suivant dans la console de l'instance du service lanc\u00e9e sur le port 8080:","title":"Microservice ConfigService"},{"location":"tp-ds/#microservice-discoveryservice","text":"Pour \u00e9viter un couplage fort entre microservices, il est fortement recommand\u00e9 d'utiliser un service de d\u00e9couverte qui permet d'enregistrer les propri\u00e9t\u00e9s des diff\u00e9rents services et d'\u00e9viter ainsi d'avoir \u00e0 appeler un service directement. Au lieu de cela, le service de d\u00e9couverte fournira dynamiquement les informations n\u00e9cessaires, ce qui permet d'assurer l'\u00e9lasticit\u00e9 et la dynamicit\u00e9 propres \u00e0 une architecture microservices. Pour r\u00e9aliser cela, Netflix offre le service Eureka Service Registration and Discovery , que nous allons utiliser dans notre application. Revenir \u00e0 Spring Initializr et cr\u00e9er un nouveau projet Spring Boot intitul\u00e9 discovery-service avec les d\u00e9pendances Eureka Server et Config Client . Lancer le projet avec IntelliJ. Dans la classe DiscoveryServiceApplication , ajouter l'annotation EnableEurekaServer . package tn.insat.tpmicro.discoveryservice ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer ; @EnableEurekaServer @SpringBootApplication public class DiscoveryServiceApplication { public static void main ( String [] args ) { SpringApplication . run ( DiscoveryServiceApplication . class , args ); } } Ajouter les propri\u00e9t\u00e9s suivantes dans son fichier application.properties . spring.application.name = discovery-service spring.cloud.config.uri = http://localhost:8888 Dans le projet config-service , cr\u00e9er un fichier discovery-service.properties sous le r\u00e9pertoire myConfig . Ajouter les propri\u00e9t\u00e9s suivantes pour (1) d\u00e9finir le port par d\u00e9faut du service de d\u00e9couverte et (2) emp\u00eacher un auto-enregistrement du service Eureka. server.port = 8761 eureka.client.fetch-registry = false eureka.client.register-with-eureka = false Pour consulter le service Eureka, aller \u00e0 http://localhost:8761 , l'interface suivante s'affiche: Nous remarquons qu'aucune instance n'est inscrite dans le serveur de d\u00e9couverte. Nous allons donc modifier le code de la classe ProductServiceApplication pour que le microservice ProductService s'enregistre: package tn.insat.tpmicro.productservice ; import org.springframework.boot.SpringApplication ; import org.springframework.boot.autoconfigure.SpringBootApplication ; import org.springframework.cloud.client.discovery.EnableDiscoveryClient ; @EnableDiscoveryClient @SpringBootApplication public class ProductServiceApplication { public static void main ( String [] args ) { SpringApplication . run ( ProductServiceApplication . class , args ); } } Red\u00e9marrer les trois instances de services ProductService et actualiser la fen\u00eatre de Eureka , vous verrez qu'un seul service est d\u00e9clar\u00e9, avec trois adresses diff\u00e9rentes.","title":"Microservice DiscoveryService"},{"location":"tp-ds/#microservice-proxyservice","text":"L'architecture microservices, en fournissant un ensemble de services ind\u00e9pendants et faiblement coupl\u00e9s, se trouve confront\u00e9e au challenge de fournir une interface unifi\u00e9e pour les consommateurs, de mani\u00e8re \u00e0 ce qu'ils ne voient pas la d\u00e9composition \u00e0 faible granularit\u00e9 de vos services. C'est pour cela que l'utilisation d'un service proxy, responsable du routage des requ\u00eates et de la r\u00e9partition de charge, est important. Netflix offre le service Zuul pour r\u00e9aliser cela. Pour cr\u00e9er votre microservice Proxy: Aller \u00e0 Spring Initializr . Cr\u00e9er le projet proxy-service avec les d\u00e9pendances suivantes: Zuul, Web, HATEOAS, Actuator, Config Client et Eureka Discovery. Ouvrir le service avec IntelliJ IDEA. Ajouter \u00e0 la classe ProxyServiceApplication l'annotation @EnableZuulProxy , ainsi que @EnableDiscoveryClient pour que le proxy soit \u00e9galement enregistr\u00e9 dans le service de d\u00e9couverte. Ajouter les propri\u00e9t\u00e9s spring.application.name et spring.cloud.config.uri dans le fichier application.properties du service proxy. Cr\u00e9er le fichier proxy-service.properties dans le r\u00e9pertoire myConfig du service de configuration, dans lequel vous allez fixer le port du service proxy \u00e0 9999. En lan\u00e7ant le service Proxy, vous remarquerez qu'il est rajout\u00e9 dans Eureka. Si vous ex\u00e9cutez la requ\u00eate http://localhost:9999/product-service/messages plusieurs fois, vous remarquerez que l'affichage c'est moi qui ai r\u00e9pondu! s'affichera sur les consoles des trois instances respectivement, \u00e0 tour de r\u00f4le.","title":"Microservice ProxyService"},{"location":"tp0/","text":"Download PDF \u00b6 Design Tools \u00b6 I invite you to discover PlantUML for designing UML diagrams. Introduction \u00b6 In this lab, we delve into Gang of Four (GoF) design patterns, offering proven, reusable solutions to common software design challenges. Our main objectives are to apply these patterns in practical, real-world situations, fostering skills in effective software development. Exercise 1 \u00b6 Let's consider the following code snippet: String orders = \"<orders>\" ; orders += \"<order number='123'>\" ; orders += \"<item number='x1786'>\" ; orders += \"carDoor\" ; orders += \"</item>\" ; orders += \"</order>\" ; orders += \"</orders>\" ; This is called an implicit tree construction. One problem with this representation is the tight coupling between the code that builds the tree and how it is represented. This example shows an XML document built using a String. The example here seems simple, but if you want to change the tree\u2019s representation, it can be problematic. Which design pattern can be used to correct this representation? Model the solution using a class diagram, and give the new code that will enable the creation of the same tree structure using your design pattern. Exercise 2 \u00b6 Consider the following design problem: A customer is interested in a particular brand of product, that will be available in a certain store very soon. In order for the customer to be informed when the product is available, some solutions are possible: The customer visits the store every day and checks the product\u2019s availability. The store sends emails to all his customers to inform of the availability of the product when it comes. Model both solutions using class and sequence diagrams. These solutions are obviously not adequate. Determine the design pattern that can solve this problem and propose a UML diagram modelling this solution. Exercise 3 \u00b6 We would like to use the Factory design pattern to model a travel agency\u2019s system that enables the customer to choose any type of transportation (Plane, Boat, Train, Car\u2026) for their travels. Propose a class diagram that models this logic.","title":"Tp0"},{"location":"tp0/#download-pdf","text":"","title":"Download PDF"},{"location":"tp0/#design-tools","text":"I invite you to discover PlantUML for designing UML diagrams.","title":"Design Tools"},{"location":"tp0/#introduction","text":"In this lab, we delve into Gang of Four (GoF) design patterns, offering proven, reusable solutions to common software design challenges. Our main objectives are to apply these patterns in practical, real-world situations, fostering skills in effective software development.","title":"Introduction"},{"location":"tp0/#exercise-1","text":"Let's consider the following code snippet: String orders = \"<orders>\" ; orders += \"<order number='123'>\" ; orders += \"<item number='x1786'>\" ; orders += \"carDoor\" ; orders += \"</item>\" ; orders += \"</order>\" ; orders += \"</orders>\" ; This is called an implicit tree construction. One problem with this representation is the tight coupling between the code that builds the tree and how it is represented. This example shows an XML document built using a String. The example here seems simple, but if you want to change the tree\u2019s representation, it can be problematic. Which design pattern can be used to correct this representation? Model the solution using a class diagram, and give the new code that will enable the creation of the same tree structure using your design pattern.","title":"Exercise 1"},{"location":"tp0/#exercise-2","text":"Consider the following design problem: A customer is interested in a particular brand of product, that will be available in a certain store very soon. In order for the customer to be informed when the product is available, some solutions are possible: The customer visits the store every day and checks the product\u2019s availability. The store sends emails to all his customers to inform of the availability of the product when it comes. Model both solutions using class and sequence diagrams. These solutions are obviously not adequate. Determine the design pattern that can solve this problem and propose a UML diagram modelling this solution.","title":"Exercise 2"},{"location":"tp0/#exercise-3","text":"We would like to use the Factory design pattern to model a travel agency\u2019s system that enables the customer to choose any type of transportation (Plane, Boat, Train, Car\u2026) for their travels. Propose a class diagram that models this logic.","title":"Exercise 3"},{"location":"tp1/","text":"Download PDF \u00b6 Introduction \u00b6 The SOLID principles are design principles that are used in Object-Oriented software development in order to encourage us to create more maintainable, understandable, and flexible applications. In this workshop, we will iterate through each principle where a given problem has already been addressed. We will analyze the existing solution, identify its shortcomings and then suggest a more SOLID design for it. Questions \u00b6 Clone this repository https://github.com/INSATunisia/SOLID locally and go through the examples in the following order: SRP (Single Responsibility Principle) OCP (Open-Closed Principle) LSP (Liskov Substituion Principle) ISP (Interface Segregation Principle) DIP (Dependency Inversion Principle) In each directory, you will find an example with its refactored solution (called example_refactored) and an exercice. You need to apply the given principle to the exercice, model it with UML and explain the reasons of your choice. I invite you to discover PlantUML for designing UML diagrams. Deliverables \u00b6 You will need to submit the following deliverables in the Classroom space (the work is done by pairs) : A report depicting the design of each exercise before and after the applied modification, with an explanation of the principle and how/why did you perform the changes. A link of the github repository showing your code.","title":"Lab1 - The SOLID principles"},{"location":"tp1/#download-pdf","text":"","title":"Download PDF"},{"location":"tp1/#introduction","text":"The SOLID principles are design principles that are used in Object-Oriented software development in order to encourage us to create more maintainable, understandable, and flexible applications. In this workshop, we will iterate through each principle where a given problem has already been addressed. We will analyze the existing solution, identify its shortcomings and then suggest a more SOLID design for it.","title":"Introduction"},{"location":"tp1/#questions","text":"Clone this repository https://github.com/INSATunisia/SOLID locally and go through the examples in the following order: SRP (Single Responsibility Principle) OCP (Open-Closed Principle) LSP (Liskov Substituion Principle) ISP (Interface Segregation Principle) DIP (Dependency Inversion Principle) In each directory, you will find an example with its refactored solution (called example_refactored) and an exercice. You need to apply the given principle to the exercice, model it with UML and explain the reasons of your choice. I invite you to discover PlantUML for designing UML diagrams.","title":"Questions"},{"location":"tp1/#deliverables","text":"You will need to submit the following deliverables in the Classroom space (the work is done by pairs) : A report depicting the design of each exercise before and after the applied modification, with an explanation of the principle and how/why did you perform the changes. A link of the github repository showing your code.","title":"Deliverables"},{"location":"tp2/","text":"Download PDF \u00b6 Introduction \u00b6 The MV* architecture is a common software architecture pattern that is motivated by the idea of having Separated Presentation which provides a clear division between domain objects that model our perception of the real world, and presentation objects that are the GUI elements we see on the screen. This reduces the coupling between components and allows each component to be independently developed, tested, modified, reused and scaled. Questions \u00b6 MV* is an umbrella term that encompasses variants of this architecture pattern, and they differ in terms of the type and level of coupling between the components. Identify the advantages, disadvantages and use cases of : MVC MVP MVVM The Tunisian ministry of health is organizing a software development hackathon in order to be able to recruit the best talent that can develop a mobile application for the EVAX platform. Motivated by the interesting work opportunity (and the even more interesting cash prize), everyone in your class has decided to participate. More than one architecture comes to mind. Keeping in mind that this is a 24 hour highly competitive hackathon where you need to be fast at developing this proof of concept, what architecture would you choose? Congratulations! Now that you have won the hackathon (and helped your savings ), it is time to actually build the mobile application. It goes without saying that this application should be robust with minimal bugs, so that it can be safely deployed and adopted by the ministry. So, in order for you to be confident with your code, it is recommended to follow a TDD approach in order to catch bugs early on and make sure that you have a higher overall test coverage. One thing to keep in mind as well is that this application is not a basic CRUD one. It has multiple views with eventual complex operations (like sending vaccine SMS and their reminders, automatically rescheduling missed appointments, etc.). Having taken all of the above into consideration, what would be the architectural style that you would choose? What refactoring would you suggest for both the web and mobile applications ? What architectures would you then suggest?","title":"Lab2 - MV* Architectures"},{"location":"tp2/#download-pdf","text":"","title":"Download PDF"},{"location":"tp2/#introduction","text":"The MV* architecture is a common software architecture pattern that is motivated by the idea of having Separated Presentation which provides a clear division between domain objects that model our perception of the real world, and presentation objects that are the GUI elements we see on the screen. This reduces the coupling between components and allows each component to be independently developed, tested, modified, reused and scaled.","title":"Introduction"},{"location":"tp2/#questions","text":"MV* is an umbrella term that encompasses variants of this architecture pattern, and they differ in terms of the type and level of coupling between the components. Identify the advantages, disadvantages and use cases of : MVC MVP MVVM The Tunisian ministry of health is organizing a software development hackathon in order to be able to recruit the best talent that can develop a mobile application for the EVAX platform. Motivated by the interesting work opportunity (and the even more interesting cash prize), everyone in your class has decided to participate. More than one architecture comes to mind. Keeping in mind that this is a 24 hour highly competitive hackathon where you need to be fast at developing this proof of concept, what architecture would you choose? Congratulations! Now that you have won the hackathon (and helped your savings ), it is time to actually build the mobile application. It goes without saying that this application should be robust with minimal bugs, so that it can be safely deployed and adopted by the ministry. So, in order for you to be confident with your code, it is recommended to follow a TDD approach in order to catch bugs early on and make sure that you have a higher overall test coverage. One thing to keep in mind as well is that this application is not a basic CRUD one. It has multiple views with eventual complex operations (like sending vaccine SMS and their reminders, automatically rescheduling missed appointments, etc.). Having taken all of the above into consideration, what would be the architectural style that you would choose? What refactoring would you suggest for both the web and mobile applications ? What architectures would you then suggest?","title":"Questions"},{"location":"tp3/","text":"Download PDF \u00b6 Introduction \u00b6 A software company (INSATix) wants to build a forecast and planning solution (F&P) for a fashion retailer, to help them predict their future sales and figure out which goods are needed for each store, location, channel on any given day, in order to be able to order the right amount to fulfill the demand. Then comes the \"planning\" side of the solution, where retail planners can benefit from the best planning strategies and use both these strategies and the generated forecast in order to plan a compelling assortment of products with the right choice count, depth and breadth; or how to build optimized price and promotional strategies. The team (UI, backend and data engineers) of INSATix has already held multiple meetings with the client in order to figure out the functional and non-functional requirements of this solution and they have agreed that there needs to be 3 applications: 2 web applications (One for forecasting and one for planning) and another headless application. Functional requirements \u00b6 Forecast Application: The client can choose a given store, day and product and visualize the forecast of its sales at any date within a 1 year interval before and after the current date. The client can choose a given store, day and product and visualize how many items should be provisioned to fulfill the future demand. In some situations, the client can choose to \u201coverride\u201d the value of the forecast and submit it. The client can also select a product and correct some of its historical sale units, then ask to trigger a real time forecast for it. The client can view an aggregated view of the sales or forecast across weeks or months. The client can visualize the products and their descriptions, the stores and their descriptions, etc \u2026 Planning Application: Use the generated forecast to break down financial budgets into categories and stores. Use the generated forecast to create plans for more accurate product assortment decisions. Use the generated forecast to create plans for appropriate promotional strategies, etc \u2026 Headless Application: The client will be sending batches of structured CSV files (historical sales of 2 years, list of products, stores, etc ...) on a weekly basis (presumably during the weekend). The solution should be able to process these huge amounts of data in order to generate forecasts and plans (results will be persisted into a storage layer). During that time, both web applications will be down as we are writing into the database. Once the batch finishes, both applications will be up again and the users should be able to query and view the new results that have been generated by this batch. Common use cases: Authentication/Authorization: Each user should be authenticated before accessing either of the 2 web applications. Note that users can be forecasters, planners, and some of them can be both. Non Functional requirements & Other constraints \u00b6 The UI needs to be highly responsive, especially when dealing with repetitive user actions that may trigger some heavy calculations. This is the first time that INSATix builds an F&P application so the solution will definitely need to be modified to fix bugs and/or improve performance, etc... INSATix is not only trying to build an F&P solution for this retailer, but as the forecast and planning features can be interesting for any other retailer, the team is also thinking about building a product that can easily be configured for future retailers without having to build a custom solution for each client. We need to have the forecast and planning applications to be independently deployed. A secure communication between the forecast and planning applications should be ensured, as well as between the applications and database layer. Questions \u00b6 Choose and explain the appropriate architecture for the described solution. Use different UML diagrams to represent several views of these systems. Emphasize your design choices for every non functional requirement and constraint. Propose some key technologies to use and explain why.","title":"Lab3 - Microservices Architecture"},{"location":"tp3/#download-pdf","text":"","title":"Download PDF"},{"location":"tp3/#introduction","text":"A software company (INSATix) wants to build a forecast and planning solution (F&P) for a fashion retailer, to help them predict their future sales and figure out which goods are needed for each store, location, channel on any given day, in order to be able to order the right amount to fulfill the demand. Then comes the \"planning\" side of the solution, where retail planners can benefit from the best planning strategies and use both these strategies and the generated forecast in order to plan a compelling assortment of products with the right choice count, depth and breadth; or how to build optimized price and promotional strategies. The team (UI, backend and data engineers) of INSATix has already held multiple meetings with the client in order to figure out the functional and non-functional requirements of this solution and they have agreed that there needs to be 3 applications: 2 web applications (One for forecasting and one for planning) and another headless application.","title":"Introduction"},{"location":"tp3/#functional-requirements","text":"Forecast Application: The client can choose a given store, day and product and visualize the forecast of its sales at any date within a 1 year interval before and after the current date. The client can choose a given store, day and product and visualize how many items should be provisioned to fulfill the future demand. In some situations, the client can choose to \u201coverride\u201d the value of the forecast and submit it. The client can also select a product and correct some of its historical sale units, then ask to trigger a real time forecast for it. The client can view an aggregated view of the sales or forecast across weeks or months. The client can visualize the products and their descriptions, the stores and their descriptions, etc \u2026 Planning Application: Use the generated forecast to break down financial budgets into categories and stores. Use the generated forecast to create plans for more accurate product assortment decisions. Use the generated forecast to create plans for appropriate promotional strategies, etc \u2026 Headless Application: The client will be sending batches of structured CSV files (historical sales of 2 years, list of products, stores, etc ...) on a weekly basis (presumably during the weekend). The solution should be able to process these huge amounts of data in order to generate forecasts and plans (results will be persisted into a storage layer). During that time, both web applications will be down as we are writing into the database. Once the batch finishes, both applications will be up again and the users should be able to query and view the new results that have been generated by this batch. Common use cases: Authentication/Authorization: Each user should be authenticated before accessing either of the 2 web applications. Note that users can be forecasters, planners, and some of them can be both.","title":"Functional requirements"},{"location":"tp3/#non-functional-requirements-other-constraints","text":"The UI needs to be highly responsive, especially when dealing with repetitive user actions that may trigger some heavy calculations. This is the first time that INSATix builds an F&P application so the solution will definitely need to be modified to fix bugs and/or improve performance, etc... INSATix is not only trying to build an F&P solution for this retailer, but as the forecast and planning features can be interesting for any other retailer, the team is also thinking about building a product that can easily be configured for future retailers without having to build a custom solution for each client. We need to have the forecast and planning applications to be independently deployed. A secure communication between the forecast and planning applications should be ensured, as well as between the applications and database layer.","title":"Non Functional requirements &amp; Other constraints"},{"location":"tp3/#questions","text":"Choose and explain the appropriate architecture for the described solution. Use different UML diagrams to represent several views of these systems. Emphasize your design choices for every non functional requirement and constraint. Propose some key technologies to use and explain why.","title":"Questions"},{"location":"tp4/","text":"Download PDF \u00b6 Requirements \u00b6 The INSATx team has been asked to build a loan management module of an existing banking application in order to automate the following steps of a loan process: The client fills in the application form and uploads the list of required documents. The loan application is first processed by the commercial service, whose task is to check the eligibility of the borrower and the repayment terms and period, based on the borrower\u2019s income and financial situation. An initial scoring is established to assess the eligibility of the client to get the loan. Once done, the client application is then processed by the risk management service in order to make sure that the suggested debt ratio is sufficient enough to maintain a healthy bank account balance for the borrower and that the loan can still be repaid in full as scheduled. This service also has access to the central bank database in order to assess if there are other outstanding commitments with other banks that have not been paid. The output of this service is a final score which dictates if the borrower\u2019s request should be approved or not. The client is then notified whether his application for a loan has been approved (in principle) or not. Next, the final step will be established by the credit service that elaborates the credit agreement to be signed and the amortization table. Both documents can be later viewed/downloaded by the client. Note that the commercial service and the risk management one should use some OCR capabilities in order to automate the extraction and processing of the needed information within the uploaded documents. Questions \u00b6 In class, choose and explain the appropriate architecture for this loan management module. As a homework, implement few use cases [TBD in class] by explaining your choice of technologies as well.","title":"Tp4"},{"location":"tp4/#download-pdf","text":"","title":"Download PDF"},{"location":"tp4/#requirements","text":"The INSATx team has been asked to build a loan management module of an existing banking application in order to automate the following steps of a loan process: The client fills in the application form and uploads the list of required documents. The loan application is first processed by the commercial service, whose task is to check the eligibility of the borrower and the repayment terms and period, based on the borrower\u2019s income and financial situation. An initial scoring is established to assess the eligibility of the client to get the loan. Once done, the client application is then processed by the risk management service in order to make sure that the suggested debt ratio is sufficient enough to maintain a healthy bank account balance for the borrower and that the loan can still be repaid in full as scheduled. This service also has access to the central bank database in order to assess if there are other outstanding commitments with other banks that have not been paid. The output of this service is a final score which dictates if the borrower\u2019s request should be approved or not. The client is then notified whether his application for a loan has been approved (in principle) or not. Next, the final step will be established by the credit service that elaborates the credit agreement to be signed and the amortization table. Both documents can be later viewed/downloaded by the client. Note that the commercial service and the risk management one should use some OCR capabilities in order to automate the extraction and processing of the needed information within the uploaded documents.","title":"Requirements"},{"location":"tp4/#questions","text":"In class, choose and explain the appropriate architecture for this loan management module. As a homework, implement few use cases [TBD in class] by explaining your choice of technologies as well.","title":"Questions"},{"location":"tp5/","text":"Download PDF \u00b6 Requirements \u00b6 The INSATx team has been asked to build a backend solution of an online shopping web application that revolves around the following main usecases: A customer can view products. A customer can make purchases. A customer can view and update his/her shopping cart. A warehouse manager can manage inventory by viewing the list of products, adding new ones or removing existing ones. In case a product is out of stock, a customer can subscribe to that product and once it is back in stock, he/she is notified through an email. Questions \u00b6 In class, there will be two groups, each working on its solution. Each group will be divided into teams where each team will work on a component of the solution. Each group has to choose a team lead who will assist discussions around which architecture to choose and who will oversee the teams and coordinate the efforts towards bringing the project across the finish line.","title":"Tp5"},{"location":"tp5/#download-pdf","text":"","title":"Download PDF"},{"location":"tp5/#requirements","text":"The INSATx team has been asked to build a backend solution of an online shopping web application that revolves around the following main usecases: A customer can view products. A customer can make purchases. A customer can view and update his/her shopping cart. A warehouse manager can manage inventory by viewing the list of products, adding new ones or removing existing ones. In case a product is out of stock, a customer can subscribe to that product and once it is back in stock, he/she is notified through an email.","title":"Requirements"},{"location":"tp5/#questions","text":"In class, there will be two groups, each working on its solution. Each group will be divided into teams where each team will work on a component of the solution. Each group has to choose a team lead who will assist discussions around which architecture to choose and who will oversee the teams and coordinate the efforts towards bringing the project across the finish line.","title":"Questions"}]}